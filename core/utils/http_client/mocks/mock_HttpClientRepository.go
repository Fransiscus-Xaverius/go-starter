// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cde/go-example/core/utils/http_client (interfaces: HttpClientRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	http_client "github.com/cde/go-example/core/utils/http_client"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpClientRepository is a mock of HttpClientRepository interface.
type MockHttpClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientRepositoryMockRecorder
}

// MockHttpClientRepositoryMockRecorder is the mock recorder for MockHttpClientRepository.
type MockHttpClientRepositoryMockRecorder struct {
	mock *MockHttpClientRepository
}

// NewMockHttpClientRepository creates a new mock instance.
func NewMockHttpClientRepository(ctrl *gomock.Controller) *MockHttpClientRepository {
	mock := &MockHttpClientRepository{ctrl: ctrl}
	mock.recorder = &MockHttpClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClientRepository) EXPECT() *MockHttpClientRepositoryMockRecorder {
	return m.recorder
}

// DisableDebug mocks base method.
func (m *MockHttpClientRepository) DisableDebug() http_client.HttpClientRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDebug")
	ret0, _ := ret[0].(http_client.HttpClientRepository)
	return ret0
}

// DisableDebug indicates an expected call of DisableDebug.
func (mr *MockHttpClientRepositoryMockRecorder) DisableDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDebug", reflect.TypeOf((*MockHttpClientRepository)(nil).DisableDebug))
}

// Do mocks base method.
func (m *MockHttpClientRepository) Do(arg0 context.Context, arg1 *http.Request, arg2 map[string]string) (*http_client.ResponseByte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http_client.ResponseByte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientRepositoryMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClientRepository)(nil).Do), arg0, arg1, arg2)
}

// EnableDebug mocks base method.
func (m *MockHttpClientRepository) EnableDebug() http_client.HttpClientRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDebug")
	ret0, _ := ret[0].(http_client.HttpClientRepository)
	return ret0
}

// EnableDebug indicates an expected call of EnableDebug.
func (mr *MockHttpClientRepositoryMockRecorder) EnableDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDebug", reflect.TypeOf((*MockHttpClientRepository)(nil).EnableDebug))
}
