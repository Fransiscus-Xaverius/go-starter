// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cde/go-example/core/utils/security (interfaces: AccessKey)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAccessKey is a mock of AccessKey interface.
type MockAccessKey struct {
	ctrl     *gomock.Controller
	recorder *MockAccessKeyMockRecorder
}

// MockAccessKeyMockRecorder is the mock recorder for MockAccessKey.
type MockAccessKeyMockRecorder struct {
	mock *MockAccessKey
}

// NewMockAccessKey creates a new mock instance.
func NewMockAccessKey(ctrl *gomock.Controller) *MockAccessKey {
	mock := &MockAccessKey{ctrl: ctrl}
	mock.recorder = &MockAccessKeyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessKey) EXPECT() *MockAccessKeyMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockAccessKey) Decrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockAccessKeyMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockAccessKey)(nil).Decrypt), arg0)
}

// Encrypt mocks base method.
func (m *MockAccessKey) Encrypt(arg0 time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockAccessKeyMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockAccessKey)(nil).Encrypt), arg0)
}
