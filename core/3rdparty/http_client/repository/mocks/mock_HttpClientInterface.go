// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cde/go-example/core/3rdparty/http_client/repository (interfaces: HttpClientInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	dto "github.com/cde/go-example/core/3rdparty/http_client/dto"
	repository "github.com/cde/go-example/core/3rdparty/http_client/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpClientInterface is a mock of HttpClientInterface interface.
type MockHttpClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientInterfaceMockRecorder
}

// MockHttpClientInterfaceMockRecorder is the mock recorder for MockHttpClientInterface.
type MockHttpClientInterfaceMockRecorder struct {
	mock *MockHttpClientInterface
}

// NewMockHttpClientInterface creates a new mock instance.
func NewMockHttpClientInterface(ctrl *gomock.Controller) *MockHttpClientInterface {
	mock := &MockHttpClientInterface{ctrl: ctrl}
	mock.recorder = &MockHttpClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClientInterface) EXPECT() *MockHttpClientInterfaceMockRecorder {
	return m.recorder
}

// DisableDebug mocks base method.
func (m *MockHttpClientInterface) DisableDebug() repository.HttpClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableDebug")
	ret0, _ := ret[0].(repository.HttpClientInterface)
	return ret0
}

// DisableDebug indicates an expected call of DisableDebug.
func (mr *MockHttpClientInterfaceMockRecorder) DisableDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableDebug", reflect.TypeOf((*MockHttpClientInterface)(nil).DisableDebug))
}

// Do mocks base method.
func (m *MockHttpClientInterface) Do(arg0 context.Context, arg1 *http.Request, arg2 map[string]string) (*dto.ResponseByte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.ResponseByte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpClientInterfaceMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpClientInterface)(nil).Do), arg0, arg1, arg2)
}

// EnableDebug mocks base method.
func (m *MockHttpClientInterface) EnableDebug() repository.HttpClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableDebug")
	ret0, _ := ret[0].(repository.HttpClientInterface)
	return ret0
}

// EnableDebug indicates an expected call of EnableDebug.
func (mr *MockHttpClientInterfaceMockRecorder) EnableDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDebug", reflect.TypeOf((*MockHttpClientInterface)(nil).EnableDebug))
}
